# Generated by Django 4.2.24 on 2025-09-25 12:57

import functools
import uuid

import django.core.validators
import django.db.migrations.operations.special
from django.db import migrations, models

import autoslug.fields
import tinymce.models

import openforms.config.models.config
import openforms.template.validators
import openforms.utils.translations


def copy_family_members_data_api(apps, schema_editor):
    FamilyMembersTypeConfig = apps.get_model(
        "np_family_members", "FamilyMembersTypeConfig"
    )
    np_family_members_config = (
        FamilyMembersTypeConfig.objects.first()
    )  # there is at most one record, because it's a solo model
    if np_family_members_config is None:
        return

    GlobalConfiguration = apps.get_model("config", "GlobalConfiguration")
    global_config = GlobalConfiguration.objects.first()
    if global_config is None:
        return

    if data_api := np_family_members_config.data_api:
        global_config.family_members_data_api = data_api
        global_config.save()


def add_default_wms_tile_layers(apps, schema_editor):
    from django.core.management import call_command

    call_command("loaddata", "default_map_wms_tile_layers")


class Migration(migrations.Migration):
    replaces = [
        ("config", "0056_globalconfiguration_referentielijsten_services"),
        (
            "config",
            "0057_alter_globalconfiguration_cosign_submission_confirmation_template_and_more",
        ),
        (
            "config",
            "0058_alter_globalconfiguration_referentielijsten_services_to_reference_lists_services",
        ),
        ("config", "0059_globalconfiguration_family_members_data_api"),
        ("config", "0060_copy_family_members_data_api"),
        ("config", "0061_alter_maptilelayer_identifier"),
        ("config", "0062_mapwmstilelayer"),
        ("config", "0063_alter_globalconfiguration_form_map_default_latitude_and_more"),
    ]

    dependencies = [
        ("zgw_consumers", "0023_add_help_texts_to_service_fields"),
        ("config", "0055_v270_to_v300"),
        ("np_family_members", "0002_alter_familymemberstypeconfig_table"),
    ]

    operations = [
        migrations.AlterField(
            model_name="globalconfiguration",
            name="cosign_submission_confirmation_template",
            field=tinymce.models.HTMLField(
                default=functools.partial(
                    openforms.config.models.config._render,
                    *("config/default_cosign_submission_confirmation.html",),
                    **{},
                ),
                help_text="The content of the submission confirmation page for submissions requiring cosigning. The variables 'public_reference' and 'cosigner_email' are available (using expressions '{{ public_reference }}' and '{{ cosigner_email }}', respectively). We strongly advise you to include the 'public_reference' in case users need to contact the customer service.",
                validators=[
                    openforms.template.validators.DjangoTemplateValidator(
                        backend="openforms.template.openforms_backend"
                    )
                ],
                verbose_name="cosign submission confirmation template",
            ),
        ),
        migrations.AlterField(
            model_name="globalconfiguration",
            name="cosign_submission_confirmation_template_en",
            field=tinymce.models.HTMLField(
                default=functools.partial(
                    openforms.config.models.config._render,
                    *("config/default_cosign_submission_confirmation.html",),
                    **{},
                ),
                help_text="The content of the submission confirmation page for submissions requiring cosigning. The variables 'public_reference' and 'cosigner_email' are available (using expressions '{{ public_reference }}' and '{{ cosigner_email }}', respectively). We strongly advise you to include the 'public_reference' in case users need to contact the customer service.",
                null=True,
                validators=[
                    openforms.template.validators.DjangoTemplateValidator(
                        backend="openforms.template.openforms_backend"
                    )
                ],
                verbose_name="cosign submission confirmation template",
            ),
        ),
        migrations.AlterField(
            model_name="globalconfiguration",
            name="cosign_submission_confirmation_template_nl",
            field=tinymce.models.HTMLField(
                default=functools.partial(
                    openforms.config.models.config._render,
                    *("config/default_cosign_submission_confirmation.html",),
                    **{},
                ),
                help_text="The content of the submission confirmation page for submissions requiring cosigning. The variables 'public_reference' and 'cosigner_email' are available (using expressions '{{ public_reference }}' and '{{ cosigner_email }}', respectively). We strongly advise you to include the 'public_reference' in case users need to contact the customer service.",
                null=True,
                validators=[
                    openforms.template.validators.DjangoTemplateValidator(
                        backend="openforms.template.openforms_backend"
                    )
                ],
                verbose_name="cosign submission confirmation template",
            ),
        ),
        migrations.AlterField(
            model_name="globalconfiguration",
            name="submission_confirmation_title",
            field=models.CharField(
                default=functools.partial(
                    openforms.utils.translations.get_default,
                    *("Confirmation: {{ public_reference }}",),
                    **{},
                ),
                help_text="The content of the confirmation page title. You can (and should) include the 'public_reference' variable (using expression '{{ public_reference }}') so the users have a reference in case they need to contact the customer service.",
                max_length=200,
                validators=[openforms.template.validators.DjangoTemplateValidator()],
                verbose_name="submission confirmation title",
            ),
        ),
        migrations.AlterField(
            model_name="globalconfiguration",
            name="submission_confirmation_title_en",
            field=models.CharField(
                default=functools.partial(
                    openforms.utils.translations.get_default,
                    *("Confirmation: {{ public_reference }}",),
                    **{},
                ),
                help_text="The content of the confirmation page title. You can (and should) include the 'public_reference' variable (using expression '{{ public_reference }}') so the users have a reference in case they need to contact the customer service.",
                max_length=200,
                null=True,
                validators=[openforms.template.validators.DjangoTemplateValidator()],
                verbose_name="submission confirmation title",
            ),
        ),
        migrations.AlterField(
            model_name="globalconfiguration",
            name="submission_confirmation_title_nl",
            field=models.CharField(
                default=functools.partial(
                    openforms.utils.translations.get_default,
                    *("Confirmation: {{ public_reference }}",),
                    **{},
                ),
                help_text="The content of the confirmation page title. You can (and should) include the 'public_reference' variable (using expression '{{ public_reference }}') so the users have a reference in case they need to contact the customer service.",
                max_length=200,
                null=True,
                validators=[openforms.template.validators.DjangoTemplateValidator()],
                verbose_name="submission confirmation title",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="reference_lists_services",
            field=models.ManyToManyField(
                blank=True,
                help_text="List of services that are instances of the Referentielijsten API. The selected services will be shown as options when configuring select or selectboxes components to be populated from Referentielijsten.",
                to="zgw_consumers.service",
                verbose_name="reference lists services",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="family_members_data_api",
            field=models.CharField(
                blank=True,
                choices=[("haal_centraal", "Haal Centraal"), ("stuf_bg", "StufBg")],
                help_text="Which API to use to retrieve the data of the family members.",
                max_length=100,
                verbose_name="family members data api",
            ),
        ),
        migrations.RunPython(
            code=copy_family_members_data_api,
            reverse_code=migrations.RunPython.noop,
        ),
        migrations.AlterField(
            model_name="maptilelayer",
            name="identifier",
            field=autoslug.fields.AutoSlugField(
                editable=True,
                help_text="A unique identifier for the tile layer.",
                max_length=100,
                populate_from="label",
                unique=True,
                verbose_name="identifier",
            ),
        ),
        migrations.CreateModel(
            name="MapWMSTileLayer",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="An easily recognizable name for the WMS tile layer, used to identify it.",
                        max_length=100,
                        verbose_name="name",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        unique=True,
                        verbose_name="UUID",
                    ),
                ),
                (
                    "url",
                    models.URLField(
                        help_text="URL to collect the WMS tile layer capabilities. To ensure correct functionality of the map, EPSG 28992 projection should be available on the WMS tile layer. Example value: https://service.pdok.nl/lv/bag/wms/v2_0?request=getCapabilities&service=WMS",
                        max_length=255,
                        verbose_name="tile layer url",
                    ),
                ),
            ],
            options={
                "verbose_name": "WMS layer",
                "verbose_name_plural": "WMS layers",
            },
        ),
        migrations.RunPython(
            code=add_default_wms_tile_layers,
            reverse_code=migrations.RunPython.noop,
        ),
        migrations.AlterField(
            model_name="globalconfiguration",
            name="form_map_default_latitude",
            field=models.FloatField(
                default=52.1326332,
                validators=[
                    django.core.validators.MinValueValidator(-90.0),
                    django.core.validators.MaxValueValidator(90.0),
                ],
                verbose_name="The default latitude for the leaflet map.",
            ),
        ),
        migrations.AlterField(
            model_name="globalconfiguration",
            name="form_map_default_longitude",
            field=models.FloatField(
                default=5.291266,
                validators=[
                    django.core.validators.MinValueValidator(-180.0),
                    django.core.validators.MaxValueValidator(180.0),
                ],
                verbose_name="The default longitude for the leaflet map.",
            ),
        ),
    ]
