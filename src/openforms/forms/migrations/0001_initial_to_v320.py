# Generated by Django 4.2.24 on 2025-09-25 13:14

import re
import uuid

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models

import autoslug.fields
import privates.fields
import privates.storages
import tinymce.models

import csp_post_processor.fields
import openforms.authentication.fields
import openforms.forms.models.form_step
import openforms.forms.models.form_variable
import openforms.forms.models.form_version
import openforms.forms.validators
import openforms.payments.fields
import openforms.registrations.fields
import openforms.template.validators
import openforms.utils.files


class Migration(migrations.Migration):
    replaces = [
        ("forms", "0001_initial_to_v250"),
        ("forms", "0092_v250_to_v267"),
        ("forms", "0097_v267_to_v270"),
        ("forms", "0098_v270_to_v300"),
        ("forms", "0099_formsubmissionstatisticsv2_delete_formstatistics"),
        ("forms", "0100_add_interaction_config_to_map_component"),
        ("forms", "0101_fix_radio_empty_default_value"),
        ("forms", "0102_execute_fix_scripts"),
        ("forms", "0103_fix_component_empty_default_value"),
        ("forms", "0104_formauthenticationbackend"),
        (
            "forms",
            "0105_data_migrate_form_authentication_backend_options_to_form_authentication_backend",
        ),
        ("forms", "0106_remove_form_authentication_backend_options"),
    ]

    dependencies = [
        ("products", "0001_initial_to_v270"),
        ("config", "0001_initial_to_v250"),
        ("logging", "0002_avgtimelinelogproxy"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("variables", "0001_initial_to_openforms_v230"),
    ]

    operations = [
        migrations.CreateModel(
            name="Category",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("path", models.CharField(max_length=255, unique=True)),
                ("depth", models.PositiveIntegerField()),
                ("numchild", models.PositiveIntegerField(default=0)),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, unique=True, verbose_name="UUID"
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Human readable name",
                        max_length=64,
                        verbose_name="name",
                    ),
                ),
            ],
            options={
                "verbose_name": "category",
                "verbose_name_plural": "categories",
            },
        ),
        migrations.CreateModel(
            name="FormDefinition",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=50, verbose_name="name")),
                (
                    "name_en",
                    models.CharField(max_length=50, null=True, verbose_name="name"),
                ),
                (
                    "name_nl",
                    models.CharField(max_length=50, null=True, verbose_name="name"),
                ),
                (
                    "slug",
                    autoslug.fields.AutoSlugField(
                        editable=True,
                        max_length=100,
                        populate_from="name",
                        verbose_name="slug",
                    ),
                ),
                (
                    "configuration",
                    models.JSONField(
                        help_text="The form definition as Form.io JSON schema",
                        validators=[
                            openforms.forms.validators.validate_template_expressions
                        ],
                        verbose_name="Form.io configuration",
                    ),
                ),
                (
                    "login_required",
                    models.BooleanField(
                        default=False,
                        help_text="DigID Login required for form step",
                        verbose_name="login required",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, unique=True, verbose_name="UUID"
                    ),
                ),
                (
                    "is_reusable",
                    models.BooleanField(
                        default=False,
                        help_text="Allow this definition to be re-used in multiple forms",
                        verbose_name="is reusable",
                    ),
                ),
                (
                    "internal_name",
                    models.CharField(
                        blank=True,
                        help_text="internal name for management purposes",
                        max_length=50,
                        verbose_name="internal name",
                    ),
                ),
                (
                    "_num_components",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="The total number of Formio components used in the configuration",
                        verbose_name="number of Formio components",
                    ),
                ),
            ],
            options={
                "verbose_name": "Form definition",
                "verbose_name_plural": "Form definitions",
            },
        ),
        migrations.CreateModel(
            name="Form",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=150, verbose_name="name")),
                (
                    "slug",
                    autoslug.fields.AutoSlugField(
                        editable=True,
                        max_length=100,
                        populate_from="name",
                        unique=True,
                        verbose_name="slug",
                    ),
                ),
                ("active", models.BooleanField(default=False, verbose_name="active")),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, unique=True, verbose_name="UUID"
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="products.product",
                    ),
                ),
                ("_is_deleted", models.BooleanField(default=False)),
                (
                    "maintenance_mode",
                    models.BooleanField(
                        default=False,
                        help_text="Users will not be able to start the form if it is in maintenance mode.",
                        verbose_name="maintenance mode",
                    ),
                ),
                (
                    "submission_confirmation_template",
                    tinymce.models.HTMLField(
                        blank=True,
                        help_text="The content of the submission confirmation page. It can contain variables that will be templated from the submitted form data. If not specified, the global template will be used.",
                        validators=[
                            openforms.template.validators.DjangoTemplateValidator(
                                backend="openforms.template.openforms_backend"
                            )
                        ],
                        verbose_name="submission confirmation template",
                    ),
                ),
                (
                    "show_progress_indicator",
                    models.BooleanField(
                        default=True,
                        help_text="Whether the step progression should be displayed in the UI or not.",
                        verbose_name="show progress indicator",
                    ),
                ),
                (
                    "begin_text",
                    models.CharField(
                        blank=True,
                        help_text="The text that will be displayed at the start of the form to indicate the user can begin to fill in the form. Leave blank to get value from global configuration.",
                        max_length=50,
                        verbose_name="begin text",
                    ),
                ),
                (
                    "change_text",
                    models.CharField(
                        blank=True,
                        help_text="The text that will be displayed in the overview page to change a certain step. Leave blank to get value from global configuration.",
                        max_length=50,
                        verbose_name="change text",
                    ),
                ),
                (
                    "confirm_text",
                    models.CharField(
                        blank=True,
                        help_text="The text that will be displayed in the overview page to confirm the form is filled in correctly. Leave blank to get value from global configuration.",
                        max_length=50,
                        verbose_name="confirm text",
                    ),
                ),
                (
                    "previous_text",
                    models.CharField(
                        blank=True,
                        help_text="The text that will be displayed in the overview page to go to the previous step. Leave blank to get value from global configuration.",
                        max_length=50,
                        verbose_name="previous text",
                    ),
                ),
                (
                    "payment_backend",
                    openforms.payments.fields.PaymentBackendChoiceField(
                        blank=True, max_length=100, verbose_name="payment backend"
                    ),
                ),
                (
                    "payment_backend_options",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        null=True,
                        verbose_name="payment backend options",
                    ),
                ),
                (
                    "all_submissions_removal_limit",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Amount of days when all submissions of this form will be permanently deleted. Leave blank to use value in General Configuration.",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="all submissions removal limit",
                    ),
                ),
                (
                    "errored_submissions_removal_limit",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Amount of days errored submissions of this form will remain before being removed. Leave blank to use value in General Configuration.",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="errored submission removal limit",
                    ),
                ),
                (
                    "errored_submissions_removal_method",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("delete_permanently", "Submissions will be deleted"),
                            (
                                "make_anonymous",
                                "Sensitive data within the submissions will be deleted",
                            ),
                        ],
                        help_text="How errored submissions of this form will be removed after the limit. Leave blank to use value in General Configuration.",
                        max_length=50,
                        verbose_name="errored submission removal limit",
                    ),
                ),
                (
                    "incomplete_submissions_removal_limit",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Amount of days incomplete submissions of this form will remain before being removed. Leave blank to use value in General Configuration.",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="incomplete submission removal limit",
                    ),
                ),
                (
                    "incomplete_submissions_removal_method",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("delete_permanently", "Submissions will be deleted"),
                            (
                                "make_anonymous",
                                "Sensitive data within the submissions will be deleted",
                            ),
                        ],
                        help_text="How incomplete submissions of this form will be removed after the limit. Leave blank to use value in General Configuration.",
                        max_length=50,
                        verbose_name="incomplete submissions removal method",
                    ),
                ),
                (
                    "successful_submissions_removal_limit",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Amount of days successful submissions of this form will remain before being removed. Leave blank to use value in General Configuration.",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="successful submission removal limit",
                    ),
                ),
                (
                    "successful_submissions_removal_method",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("delete_permanently", "Submissions will be deleted"),
                            (
                                "make_anonymous",
                                "Sensitive data within the submissions will be deleted",
                            ),
                        ],
                        help_text="How successful submissions of this form will be removed after the limit. Leave blank to use value in General Configuration.",
                        max_length=50,
                        verbose_name="successful submissions removal method",
                    ),
                ),
                (
                    "internal_name",
                    models.CharField(
                        blank=True,
                        help_text="internal name for management purposes",
                        max_length=150,
                        verbose_name="internal name",
                    ),
                ),
                (
                    "explanation_template",
                    csp_post_processor.fields.CSPPostProcessedWYSIWYGField(
                        base_field=tinymce.models.HTMLField(
                            blank=True,
                            help_text="Content that will be shown on the start page of the form, below the title and above the log in text.",
                            verbose_name="explanation template",
                        ),
                        blank=True,
                        help_text="Content that will be shown on the start page of the form, below the title and above the log in text.",
                        verbose_name="explanation template",
                    ),
                ),
                (
                    "submission_allowed",
                    models.CharField(
                        choices=[
                            ("yes", "Yes"),
                            ("no_with_overview", "No (with overview page)"),
                            ("no_without_overview", "No (without overview page)"),
                        ],
                        default="yes",
                        help_text="Whether the user is allowed to submit this form or not, and whether the overview page should be shown if they are not.",
                        max_length=100,
                        verbose_name="submission allowed",
                    ),
                ),
                (
                    "display_main_website_link",
                    models.BooleanField(
                        default=True,
                        help_text="Display the link to the main website on the submission confirmation page.",
                        verbose_name="display main website link",
                    ),
                ),
                (
                    "auto_login_authentication_backend",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="automatic login"
                    ),
                ),
                (
                    "category",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="forms.category",
                    ),
                ),
                (
                    "begin_text_en",
                    models.CharField(
                        blank=True,
                        help_text="The text that will be displayed at the start of the form to indicate the user can begin to fill in the form. Leave blank to get value from global configuration.",
                        max_length=50,
                        null=True,
                        verbose_name="begin text",
                    ),
                ),
                (
                    "begin_text_nl",
                    models.CharField(
                        blank=True,
                        help_text="The text that will be displayed at the start of the form to indicate the user can begin to fill in the form. Leave blank to get value from global configuration.",
                        max_length=50,
                        null=True,
                        verbose_name="begin text",
                    ),
                ),
                (
                    "change_text_en",
                    models.CharField(
                        blank=True,
                        help_text="The text that will be displayed in the overview page to change a certain step. Leave blank to get value from global configuration.",
                        max_length=50,
                        null=True,
                        verbose_name="change text",
                    ),
                ),
                (
                    "change_text_nl",
                    models.CharField(
                        blank=True,
                        help_text="The text that will be displayed in the overview page to change a certain step. Leave blank to get value from global configuration.",
                        max_length=50,
                        null=True,
                        verbose_name="change text",
                    ),
                ),
                (
                    "confirm_text_en",
                    models.CharField(
                        blank=True,
                        help_text="The text that will be displayed in the overview page to confirm the form is filled in correctly. Leave blank to get value from global configuration.",
                        max_length=50,
                        null=True,
                        verbose_name="confirm text",
                    ),
                ),
                (
                    "confirm_text_nl",
                    models.CharField(
                        blank=True,
                        help_text="The text that will be displayed in the overview page to confirm the form is filled in correctly. Leave blank to get value from global configuration.",
                        max_length=50,
                        null=True,
                        verbose_name="confirm text",
                    ),
                ),
                (
                    "explanation_template_en",
                    csp_post_processor.fields.CSPPostProcessedWYSIWYGField(
                        base_field=tinymce.models.HTMLField(
                            blank=True,
                            help_text="Content that will be shown on the start page of the form, below the title and above the log in text.",
                            verbose_name="explanation template",
                        ),
                        blank=True,
                        help_text="Content that will be shown on the start page of the form, below the title and above the log in text.",
                        null=True,
                        verbose_name="explanation template",
                    ),
                ),
                (
                    "explanation_template_nl",
                    csp_post_processor.fields.CSPPostProcessedWYSIWYGField(
                        base_field=tinymce.models.HTMLField(
                            blank=True,
                            help_text="Content that will be shown on the start page of the form, below the title and above the log in text.",
                            verbose_name="explanation template",
                        ),
                        blank=True,
                        help_text="Content that will be shown on the start page of the form, below the title and above the log in text.",
                        null=True,
                        verbose_name="explanation template",
                    ),
                ),
                (
                    "name_en",
                    models.CharField(max_length=150, null=True, verbose_name="name"),
                ),
                (
                    "name_nl",
                    models.CharField(max_length=150, null=True, verbose_name="name"),
                ),
                (
                    "previous_text_en",
                    models.CharField(
                        blank=True,
                        help_text="The text that will be displayed in the overview page to go to the previous step. Leave blank to get value from global configuration.",
                        max_length=50,
                        null=True,
                        verbose_name="previous text",
                    ),
                ),
                (
                    "previous_text_nl",
                    models.CharField(
                        blank=True,
                        help_text="The text that will be displayed in the overview page to go to the previous step. Leave blank to get value from global configuration.",
                        max_length=50,
                        null=True,
                        verbose_name="previous text",
                    ),
                ),
                (
                    "translation_enabled",
                    models.BooleanField(
                        default=False, verbose_name="translation enabled"
                    ),
                ),
                (
                    "include_confirmation_page_content_in_pdf",
                    models.BooleanField(
                        default=True,
                        help_text="Display the instruction from the confirmation page in the PDF.",
                        verbose_name="include confirmation page content in PDF",
                    ),
                ),
                (
                    "submission_confirmation_template_en",
                    tinymce.models.HTMLField(
                        blank=True,
                        help_text="The content of the submission confirmation page. It can contain variables that will be templated from the submitted form data. If not specified, the global template will be used.",
                        null=True,
                        validators=[
                            openforms.template.validators.DjangoTemplateValidator(
                                backend="openforms.template.openforms_backend"
                            )
                        ],
                        verbose_name="submission confirmation template",
                    ),
                ),
                (
                    "submission_confirmation_template_nl",
                    tinymce.models.HTMLField(
                        blank=True,
                        help_text="The content of the submission confirmation page. It can contain variables that will be templated from the submitted form data. If not specified, the global template will be used.",
                        null=True,
                        validators=[
                            openforms.template.validators.DjangoTemplateValidator(
                                backend="openforms.template.openforms_backend"
                            )
                        ],
                        verbose_name="submission confirmation template",
                    ),
                ),
                (
                    "is_appointment",
                    models.BooleanField(
                        default=False,
                        help_text="Mark the form as an appointment form. Appointment forms do not support form designer steps.",
                        verbose_name="appointment enabled",
                    ),
                ),
                (
                    "send_confirmation_email",
                    models.BooleanField(
                        default=True,
                        help_text="Whether a confirmation email should be sent to the end user filling in the form.",
                        verbose_name="send confirmation email",
                    ),
                ),
                (
                    "suspension_allowed",
                    models.BooleanField(
                        default=True,
                        help_text="Whether the user is allowed to suspend this form or not.",
                        verbose_name="suspension allowed",
                    ),
                ),
                (
                    "ask_privacy_consent",
                    models.CharField(
                        choices=[
                            ("global_setting", "Global setting"),
                            ("required", "Required"),
                            ("disabled", "Disabled"),
                        ],
                        default="global_setting",
                        help_text="If enabled, the user will have to agree to the privacy policy before submitting a form.",
                        max_length=50,
                        verbose_name="ask privacy consent",
                    ),
                ),
                (
                    "ask_statement_of_truth",
                    models.CharField(
                        choices=[
                            ("global_setting", "Global setting"),
                            ("required", "Required"),
                            ("disabled", "Disabled"),
                        ],
                        default="global_setting",
                        help_text="If enabled, the user will have to agree that they filled out the form truthfully before submitting it.",
                        max_length=50,
                        verbose_name="ask statement of truth",
                    ),
                ),
                (
                    "activate_on",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time on which the form should be activated.",
                        null=True,
                        verbose_name="activate on",
                    ),
                ),
                (
                    "deactivate_on",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time on which the form should be deactivated.",
                        null=True,
                        verbose_name="deactivate on",
                    ),
                ),
                (
                    "theme",
                    models.ForeignKey(
                        blank=True,
                        help_text="Apply a specific appearance configuration to the form. If left blank, then the globally configured default is applied.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="config.theme",
                        verbose_name="form theme",
                    ),
                ),
                (
                    "introduction_page_content",
                    csp_post_processor.fields.CSPPostProcessedWYSIWYGField(
                        base_field=tinymce.models.HTMLField(
                            blank=True,
                            help_text="Content for the introduction page that leads to the start page of the form. Leave blank to disable the introduction page.",
                            verbose_name="introduction page",
                        ),
                        blank=True,
                        help_text="Content for the introduction page that leads to the start page of the form. Leave blank to disable the introduction page.",
                        verbose_name="introduction page",
                    ),
                ),
                (
                    "introduction_page_content_en",
                    csp_post_processor.fields.CSPPostProcessedWYSIWYGField(
                        base_field=tinymce.models.HTMLField(
                            blank=True,
                            help_text="Content for the introduction page that leads to the start page of the form. Leave blank to disable the introduction page.",
                            verbose_name="introduction page",
                        ),
                        blank=True,
                        help_text="Content for the introduction page that leads to the start page of the form. Leave blank to disable the introduction page.",
                        null=True,
                        verbose_name="introduction page",
                    ),
                ),
                (
                    "introduction_page_content_nl",
                    csp_post_processor.fields.CSPPostProcessedWYSIWYGField(
                        base_field=tinymce.models.HTMLField(
                            blank=True,
                            help_text="Content for the introduction page that leads to the start page of the form. Leave blank to disable the introduction page.",
                            verbose_name="introduction page",
                        ),
                        blank=True,
                        help_text="Content for the introduction page that leads to the start page of the form. Leave blank to disable the introduction page.",
                        null=True,
                        verbose_name="introduction page",
                    ),
                ),
                (
                    "show_summary_progress",
                    models.BooleanField(
                        default=False,
                        help_text="Whether to display the short progress summary, indicating the current step number and total amount of steps.",
                        verbose_name="show summary of the progress",
                    ),
                ),
                (
                    "price_variable_key",
                    models.TextField(
                        blank=True,
                        help_text="Key of the variable that contains the calculated submission price.",
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Invalid variable key. It must only contain alphanumeric characters, underscores, dots and dashes and should not be ended by dash or dot.",
                                regex=re.compile("^(\\w|\\w[\\w.\\-]*\\w)$"),
                            )
                        ],
                        verbose_name="price variable key",
                    ),
                ),
                (
                    "submission_counter",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Counter to track how many submissions have been completed for the specific form. This works in combination with the maximum allowed submissions per form and can be reset via the frontend.",
                        verbose_name="submissions counter",
                    ),
                ),
                (
                    "submission_limit",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Maximum number of allowed submissions per form. Leave this empty if no limit is needed.",
                        null=True,
                        verbose_name="maximum allowed submissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "form",
                "verbose_name_plural": "forms",
            },
        ),
        migrations.CreateModel(
            name="FormStep",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "order",
                    models.PositiveIntegerField(
                        db_index=True, editable=False, verbose_name="order"
                    ),
                ),
                (
                    "form",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="forms.form"
                    ),
                ),
                (
                    "form_definition",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="forms.formdefinition",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, unique=True, verbose_name="UUID"
                    ),
                ),
                (
                    "slug",
                    autoslug.fields.AutoSlugField(
                        editable=True,
                        max_length=100,
                        null=True,
                        populate_from=openforms.forms.models.form_step.populate_from_form_definition_name,
                        unique_with=("form",),
                        verbose_name="slug",
                    ),
                ),
                (
                    "next_text",
                    models.CharField(
                        blank=True,
                        help_text="The text that will be displayed in the form step to go to the next step. Leave blank to get value from global configuration.",
                        max_length=50,
                        verbose_name="step next text",
                    ),
                ),
                (
                    "previous_text",
                    models.CharField(
                        blank=True,
                        help_text="The text that will be displayed in the form step to go to the previous step. Leave blank to get value from global configuration.",
                        max_length=50,
                        verbose_name="step previous text",
                    ),
                ),
                (
                    "save_text",
                    models.CharField(
                        blank=True,
                        help_text="The text that will be displayed in the form step to save the current information. Leave blank to get value from global configuration.",
                        max_length=50,
                        verbose_name="step save text",
                    ),
                ),
                (
                    "next_text_en",
                    models.CharField(
                        blank=True,
                        help_text="The text that will be displayed in the form step to go to the next step. Leave blank to get value from global configuration.",
                        max_length=50,
                        null=True,
                        verbose_name="step next text",
                    ),
                ),
                (
                    "next_text_nl",
                    models.CharField(
                        blank=True,
                        help_text="The text that will be displayed in the form step to go to the next step. Leave blank to get value from global configuration.",
                        max_length=50,
                        null=True,
                        verbose_name="step next text",
                    ),
                ),
                (
                    "previous_text_en",
                    models.CharField(
                        blank=True,
                        help_text="The text that will be displayed in the form step to go to the previous step. Leave blank to get value from global configuration.",
                        max_length=50,
                        null=True,
                        verbose_name="step previous text",
                    ),
                ),
                (
                    "previous_text_nl",
                    models.CharField(
                        blank=True,
                        help_text="The text that will be displayed in the form step to go to the previous step. Leave blank to get value from global configuration.",
                        max_length=50,
                        null=True,
                        verbose_name="step previous text",
                    ),
                ),
                (
                    "save_text_en",
                    models.CharField(
                        blank=True,
                        help_text="The text that will be displayed in the form step to save the current information. Leave blank to get value from global configuration.",
                        max_length=50,
                        null=True,
                        verbose_name="step save text",
                    ),
                ),
                (
                    "save_text_nl",
                    models.CharField(
                        blank=True,
                        help_text="The text that will be displayed in the form step to save the current information. Leave blank to get value from global configuration.",
                        max_length=50,
                        null=True,
                        verbose_name="step save text",
                    ),
                ),
                (
                    "is_applicable",
                    models.BooleanField(
                        default=True,
                        help_text="Whether the step is applicable by default.",
                        verbose_name="is applicable",
                    ),
                ),
            ],
            options={
                "verbose_name": "form step",
                "verbose_name_plural": "form steps",
                "ordering": ("order",),
            },
        ),
        migrations.AddConstraint(
            model_name="formstep",
            constraint=models.UniqueConstraint(
                fields=("form", "slug"), name="form_slug_unique_together"
            ),
        ),
        migrations.AddConstraint(
            model_name="formstep",
            constraint=models.UniqueConstraint(
                fields=("form", "form_definition"),
                name="form_form_definition_unique_together",
            ),
        ),
        migrations.CreateModel(
            name="FormLogic",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "order",
                    models.PositiveIntegerField(
                        db_index=True, editable=False, verbose_name="order"
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, unique=True, verbose_name="UUID"
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        blank=True,
                        help_text="Logic rule description in natural language.",
                        max_length=100,
                        verbose_name="description",
                    ),
                ),
                (
                    "json_logic_trigger",
                    models.JSONField(
                        help_text="JSON logic associated with a step in a form.",
                        verbose_name="JSON logic",
                    ),
                ),
                (
                    "actions",
                    models.JSONField(
                        help_text="Which action(s) to perform if the JSON logic evaluates to true.",
                        verbose_name="actions",
                    ),
                ),
                (
                    "form",
                    models.ForeignKey(
                        help_text="Form to which the JSON logic applies.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="forms.form",
                    ),
                ),
                (
                    "is_advanced",
                    models.BooleanField(
                        default=False,
                        help_text="Is this an advanced rule (the admin user manually wrote the trigger as JSON)?",
                        verbose_name="is advanced",
                    ),
                ),
                (
                    "trigger_from_step",
                    models.ForeignKey(
                        blank=True,
                        help_text="When set, the trigger will only be checked once the specified step is reached. This means the rule will never trigger for steps before the specified trigger step. If unset, the trigger will always be checked.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="forms.formstep",
                        verbose_name="trigger from step",
                    ),
                ),
            ],
            options={
                "verbose_name": "form logic",
                "verbose_name_plural": "form logic rules",
                "ordering": ("order",),
            },
        ),
        migrations.CreateModel(
            name="FormPriceLogic",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, unique=True, verbose_name="UUID"
                    ),
                ),
                (
                    "json_logic_trigger",
                    models.JSONField(
                        help_text='JSON logic expression that must evaluate to "true" for the price to apply.',
                        verbose_name="JSON logic",
                    ),
                ),
                (
                    "price",
                    models.DecimalField(
                        decimal_places=2, max_digits=10, verbose_name="price"
                    ),
                ),
                (
                    "form",
                    models.ForeignKey(
                        help_text="Form to which the pricing JSON logic applies.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="forms.form",
                    ),
                ),
            ],
            options={
                "verbose_name": "form price rule",
                "verbose_name_plural": "form price rules",
            },
        ),
        migrations.CreateModel(
            name="FormVersion",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, unique=True, verbose_name="UUID"
                    ),
                ),
                (
                    "created",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time of creation of the form version.",
                        verbose_name="created",
                    ),
                ),
                (
                    "export_blob",
                    models.JSONField(
                        help_text="The form, form definitions and form steps that make up this version, saved as JSON data."
                    ),
                ),
                (
                    "form",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="forms.form",
                        verbose_name="form",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Description/context about this particular version.",
                        verbose_name="version description",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="User who authored this version.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="user",
                    ),
                ),
                (
                    "app_git_sha",
                    models.CharField(
                        blank=True,
                        default=openforms.forms.models.form_version.get_app_git_sha,
                        editable=False,
                        help_text="Application commit hash at the time this version was created.",
                        max_length=50,
                        verbose_name="application commit hash",
                    ),
                ),
                (
                    "app_release",
                    models.CharField(
                        blank=True,
                        default=openforms.forms.models.form_version.get_app_release,
                        editable=False,
                        help_text="App release/version at the time this version was created.",
                        max_length=50,
                        verbose_name="application version",
                    ),
                ),
            ],
            options={
                "verbose_name": "form version",
                "verbose_name_plural": "form versions",
            },
        ),
        migrations.CreateModel(
            name="FormsExport",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, unique=True, verbose_name="UUID"
                    ),
                ),
                (
                    "export_content",
                    privates.fields.PrivateMediaFileField(
                        help_text="Zip file containing all the exported forms.",
                        storage=privates.storages.PrivateMediaFileSystemStorage(),
                        upload_to="exports/%Y/%m/%d",
                        verbose_name="export content",
                    ),
                ),
                (
                    "datetime_requested",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="The date and time on which the bulk export was requested.",
                        verbose_name="date time requested",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="The user that requested the download.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="user",
                    ),
                ),
            ],
            options={
                "verbose_name": "forms export",
                "verbose_name_plural": "forms exports",
            },
            bases=(openforms.utils.files.DeleteFileFieldFilesMixin, models.Model),
        ),
        migrations.CreateModel(
            name="FormVariable",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.TextField(
                        help_text="Name of the variable", verbose_name="name"
                    ),
                ),
                (
                    "key",
                    models.TextField(
                        help_text="Key of the variable, should be unique with the form.",
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Invalid variable key. It must only contain alphanumeric characters, underscores, dots and dashes and should not be ended by dash or dot.",
                                regex=re.compile("^(\\w|\\w[\\w.\\-]*\\w)$"),
                            )
                        ],
                        verbose_name="key",
                    ),
                ),
                (
                    "source",
                    models.CharField(
                        choices=[
                            ("component", "Component"),
                            ("user_defined", "User defined"),
                        ],
                        help_text="Where will the data that will be associated with this variable come from",
                        max_length=50,
                        verbose_name="source",
                    ),
                ),
                (
                    "prefill_plugin",
                    models.CharField(
                        blank=True,
                        help_text="Which, if any, prefill plugin should be used",
                        max_length=50,
                        verbose_name="prefill plugin",
                    ),
                ),
                (
                    "prefill_attribute",
                    models.CharField(
                        blank=True,
                        help_text="Which attribute from the prefill response should be used to fill this variable",
                        max_length=200,
                        verbose_name="prefill attribute",
                    ),
                ),
                (
                    "prefill_options",
                    models.JSONField(
                        blank=True, default=dict, verbose_name="prefill options"
                    ),
                ),
                (
                    "prefill_identifier_role",
                    models.CharField(
                        choices=[("main", "Main"), ("authorizee", "Authorizee")],
                        default="main",
                        help_text="In case that multiple identifiers are returned (in the case of eHerkenning bewindvoering and DigiD Machtigen), should the prefill data related to the main identifier be used, or that related to the authorised person?",
                        max_length=100,
                        verbose_name="prefill identifier role",
                    ),
                ),
                (
                    "data_type",
                    models.CharField(
                        choices=[
                            ("string", "String"),
                            ("boolean", "Boolean"),
                            ("object", "Object"),
                            ("array", "Array"),
                            ("int", "Integer"),
                            ("float", "Float"),
                            ("datetime", "Datetime"),
                            ("time", "Time"),
                            ("date", "Date"),
                        ],
                        help_text="The type of the value that will be associated with this variable",
                        max_length=50,
                        verbose_name="data type",
                    ),
                ),
                (
                    "data_format",
                    models.CharField(
                        blank=True,
                        help_text="The format of the value that will be associated with this variable",
                        max_length=250,
                        verbose_name="data format",
                    ),
                ),
                (
                    "is_sensitive_data",
                    models.BooleanField(
                        default=False,
                        help_text="Will this variable be associated with sensitive data?",
                        verbose_name="is sensitive data",
                    ),
                ),
                (
                    "initial_value",
                    models.JSONField(
                        blank=True,
                        help_text="The initial value for this field",
                        null=True,
                        verbose_name="initial value",
                    ),
                ),
                (
                    "form",
                    models.ForeignKey(
                        help_text="Form to which this variable is related",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="forms.form",
                        verbose_name="form",
                    ),
                ),
                (
                    "form_definition",
                    models.ForeignKey(
                        blank=True,
                        help_text="Form definition to which this variable is related. This is kept as metadata",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="forms.formdefinition",
                        verbose_name="form definition",
                    ),
                ),
                (
                    "service_fetch_configuration",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="variables.servicefetchconfiguration",
                        verbose_name="service fetch configuration",
                    ),
                ),
            ],
            options={
                "verbose_name": "Form variable",
                "verbose_name_plural": "Form variables",
                "unique_together": {("form", "key")},
            },
            managers=[
                ("objects", openforms.forms.models.form_variable.FormVariableManager()),
            ],
        ),
        migrations.AddConstraint(
            model_name="formvariable",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(
                        models.Q(
                            ("form_definition__isnull", True),
                            models.Q(("source", "component"), _negated=True),
                        ),
                        ("form_definition__isnull", False),
                        _connector="OR",
                    )
                ),
                name="form_definition_not_null_for_component_vars",
            ),
        ),
        migrations.AddConstraint(
            model_name="formvariable",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(
                        models.Q(("prefill_plugin", ""), _negated=True),
                        ("service_fetch_configuration__isnull", False),
                    ),
                    _negated=True,
                ),
                name="prefill_config_xor_service_fetch_config",
            ),
        ),
        migrations.AddConstraint(
            model_name="formvariable",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(
                        models.Q(
                            ("prefill_plugin", ""),
                            ("prefill_attribute", ""),
                            ("prefill_options", {}),
                        ),
                        models.Q(
                            models.Q(("prefill_plugin", ""), _negated=True),
                            ("prefill_attribute", ""),
                            models.Q(("prefill_options", {}), _negated=True),
                            ("source", "user_defined"),
                        ),
                        models.Q(
                            models.Q(("prefill_plugin", ""), _negated=True),
                            models.Q(("prefill_attribute", ""), _negated=True),
                            ("prefill_options", {}),
                        ),
                        _connector="OR",
                    )
                ),
                name="prefill_config_component_or_user_defined",
            ),
        ),
        migrations.CreateModel(
            name="FormRegistrationBackend",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "key",
                    models.CharField(
                        help_text="The key to use to refer to this configuration in form logic.",
                        max_length=50,
                        verbose_name="key",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="A recognisable name for this backend configuration.",
                        max_length=255,
                        verbose_name="name",
                    ),
                ),
                (
                    "backend",
                    openforms.registrations.fields.RegistrationBackendChoiceField(
                        max_length=100, verbose_name="registration backend"
                    ),
                ),
                (
                    "options",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        verbose_name="registration backend options",
                    ),
                ),
                (
                    "form",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="registration_backends",
                        to="forms.form",
                    ),
                ),
            ],
            options={
                "unique_together": {("form", "key")},
                "verbose_name": "registration backend",
                "verbose_name_plural": "registration backends",
            },
        ),
        migrations.CreateModel(
            name="FormSubmissionStatistics",
            fields=[],
            options={
                "verbose_name": "form submission statistics",
                "verbose_name_plural": "form submission statistics",
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("logging.timelinelogproxy",),
        ),
        migrations.CreateModel(
            name="FormAuthenticationBackend",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "backend",
                    openforms.authentication.fields.BackendChoiceField(
                        max_length=100, verbose_name="authentication backend"
                    ),
                ),
                (
                    "options",
                    models.JSONField(
                        blank=True,
                        null=True,
                        verbose_name="authentication backend options",
                    ),
                ),
                (
                    "form",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="auth_backends",
                        to="forms.form",
                    ),
                ),
            ],
            options={
                "verbose_name": "authentication backend",
                "verbose_name_plural": "authentication backends",
            },
        ),
        migrations.AddConstraint(
            model_name="FormAuthenticationBackend",
            constraint=models.UniqueConstraint(
                fields=("form", "backend"), name="form_backend_unique_together"
            ),
        ),
    ]
