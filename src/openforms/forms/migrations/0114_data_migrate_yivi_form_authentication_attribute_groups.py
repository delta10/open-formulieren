# Generated by Django 4.2.23 on 2025-08-21 08:52

from django.db import migrations
from django.db.migrations.state import StateApps
from django.db.models.fields import CharField
from django.db.models.functions.comparison import Cast


def transform_data_migrate_yivi_form_authentication_attribute_groups(
    apps: StateApps, _
):
    AttributeGroup = apps.get_model("yivi_oidc", "AttributeGroup")
    FormAuthenticationBackend = apps.get_model("forms", "FormAuthenticationBackend")

    # Map of name and stringified uuid
    attribute_groups_map: dict[str, str] = dict(
        AttributeGroup.objects.annotate(
            str_uuid=Cast("uuid", output_field=CharField())
        ).values_list("name", "str_uuid")
    )

    form_authentication_backends_using_yivi = FormAuthenticationBackend.objects.filter(
        backend="yivi_oidc"
    )

    for form_authentication_backend in form_authentication_backends_using_yivi:
        # We only update the Yivi Auth backends that use 1 or more
        # `additional_attributes_groups`.
        if not (
            additional_attributes_group_names
            := form_authentication_backend.options.get(
                "additional_attributes_groups", []
            )
        ):
            continue

        # For all defined `additional_attributes_groups`, we swap the `name` for the
        # `uuid` as identifier.
        updated_additional_attributes_groups = [
            attribute_groups_map[name]
            for name in additional_attributes_group_names
            if name in attribute_groups_map
        ]

        # Set the updated attribute groups, and save the auth backend
        form_authentication_backend.options["additional_attributes_groups"] = (
            updated_additional_attributes_groups
        )
        form_authentication_backend.save()


def reverse_data_migrate_yivi_form_authentication_attribute_groups(apps: StateApps, _):
    AttributeGroup = apps.get_model("yivi_oidc", "AttributeGroup")
    FormAuthenticationBackend = apps.get_model("forms", "FormAuthenticationBackend")

    # Map of stringified uuid and name
    attribute_groups_map: dict[str, str] = dict(
        AttributeGroup.objects.annotate(
            str_uuid=Cast("uuid", output_field=CharField())
        ).values_list("str_uuid", "name")
    )

    form_authentication_backends_using_yivi = FormAuthenticationBackend.objects.filter(
        backend="yivi_oidc"
    )

    for form_authentication_backend in form_authentication_backends_using_yivi:
        if not (
            additional_attributes_group_uuids
            := form_authentication_backend.options.get(
                "additional_attributes_groups", []
            )
        ):
            continue

        # For all defined `additional_attributes_groups`, we swap the `uuid` for the
        # `name` as identifier.
        updated_additional_attributes_groups = [
            attribute_groups_map[uuid]
            for uuid in additional_attributes_group_uuids
            if uuid in attribute_groups_map
        ]

        form_authentication_backend.options["additional_attributes_groups"] = (
            updated_additional_attributes_groups
        )
        form_authentication_backend.save()


class Migration(migrations.Migration):
    dependencies = [
        (
            "forms",
            "0113_form_new_renderer_enabled",
        ),
        ("yivi_oidc", "0005_data_migrate_set_attributegroup_uuid"),
    ]

    operations = [
        migrations.RunPython(
            transform_data_migrate_yivi_form_authentication_attribute_groups,
            reverse_data_migrate_yivi_form_authentication_attribute_groups,
        ),
    ]
